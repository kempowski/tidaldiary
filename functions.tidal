-- 6 kanal speaker array im soundlabor
let speaker = [ 0, 1/6, 2/6, 3/6, 4/6, 5/6]
-- FUER PERFORMANCE ANGLEICHEN AN VENUE!!!!!!
    speakerStep = 1.6
-- SPEAKER ERST UND LETZT
    erster = (speaker!!0)
    letzter = (speaker!!5)
-- BEWEGUNGEN GEOMETRISCH
    circllist = speaker
    circleRev = reverse circllist
    diagonal1 = [speaker!!0, speaker!!3]
    diagonal2 = [speaker!!5, speaker!!2]
    diakur1   = [speaker!!0, speaker!!4]
    diakur2   = [speaker!!5, speaker!!1]
    diakur3   = [speaker!!1, speaker!!3]
    diakur4   = [speaker!!4, speaker!!2]
    quer1     = [speaker!!0, speaker!!5]
    quer2     = [speaker!!1, speaker!!4]
    quer3     = [speaker!!2, speaker!!3]
    lang1     = [speaker!!0, speaker!!2]
    lang2     = [speaker!!5, speaker!!3]
    triangle1     = [speaker!!5, speaker!!0, speaker!!4]
    triangle2     = [speaker!!0, speaker!!1, speaker!!4]
    triangle3     = [speaker!!4, speaker!!1, speaker!!3]
    triangle4     = [speaker!!1, speaker!!2, speaker!!3]
    leftAr    = [speaker!!0, speaker!!4, speaker!!2] 
    rightAr   = [speaker!!5, speaker!!1, speaker!!3]
    kreis1 = [speaker!!0, speaker!!1, speaker!!4, speaker!!5]
    kreis2 = [speaker!!1, speaker!!2, speaker!!3, speaker!!4]
    kreis1rev = [speaker!!5, speaker!!4, speaker!!1, speaker!!0]
    kreis2rev = [speaker!!4, speaker!!3, speaker!!2, speaker!!1]
-- BEWEGUNGEN KOMPLEXER
    zigzag = [speaker!!5, speaker!!0, speaker!!4, speaker!!1, speaker!!3, speaker!!2]
    u = [speaker!!0, speaker!!1, speaker!!4, speaker!!5, speaker!!1, speaker!!2, speaker!!3, speaker!!4]
    rw = choose [-1, 1]
    sidelineLeft =   [speaker!!5, speaker!!4, speaker!!1, speaker!!2]
    sidelineRight =  [speaker!!0, speaker!!1, speaker!!4, speaker!!3]
    sidelineDouble = [speaker!!5, speaker!!4, speaker!!1, speaker!!2, speaker!!0, speaker!!1, speaker!!4, speaker!!3]
-- ARRAY BEWEGUNGEN SIMPEL
    dia1 = (fit 1 diagonal1 "0 1")
    dia2 = (fit 1 diagonal2 "0 1")
    dk1 = (fit 1 diakur1 "0 1")
    dk2 = (fit 1 diakur2 "0 1 2 3 4 5")
    dk3 = (fit 1 diakur3 "0 1 2 3 4 5")
    dk4 = (fit 1 diakur4 "0 1")
    q1 = (fit 1 quer1 "1 0")
    q2 = (fit 1 quer2 "0 1")
    q3 = (fit 1 quer3 "0 1")
    hl1 = (fit 1 lang1 "0 1")
    hl2 = (fit 1 lang2 "0 1")
-- BEWEGUNGEN KOMPLEXER
    circle = (fit 1 speaker "1 2 3 4 5 6")
    circleR = (fit 1 circleRev "1 2 3 4 5 6")
    jump = (fit 5 speaker "0 1 2 3 4 5")
    zig = (fit 1 zigzag "0 1 2 3 4 5")
    u2 = (fit 1 u "0 1 2 3 4 5")
    siliL = (fit 1 sidelineLeft "0 1 2 3")
    siliR = (fit 1 sidelineRight "0 1 2 3")
    siliD = (fit 1 sidelineDouble "0 1 2 3 4 5 6 7")
    k1 = (fit 1 kreis1 "0 1 2 3")
    k2 = (fit 1 kreis2 "0 1 2 3")
    k1r = (fit 1 kreis1rev "0 1 2 3")
    k2r = (fit 1 kreis2rev "0 1 2 3")
-- TRIANGLES
    tria1 = (fit 1 triangle1 "0 1 2")
    tria2 = (fit 1 triangle2 "0 1 2")
    tria3 = (fit 1 triangle3 "0 1 2")
    tria4 = (fit 1 triangle4 "0 1 2")
-- < > + combo
    ll = (fit 1 leftAr "0 1 2")
    rr = (fit 1 rightAr "0 1 2")
    lrlr = (fit 1 (leftAr ++ rightAr) "0 1 2 3 4 5")
-- DREHEN
    dreh a b = panbus 1 (range (-1) (1) (slow a b))


-- PATTERN 
    liste = "<0 1 2 3 4 5>"
    depricated = "<0.9 1.4 1.2>"
    drama = "<0.8 1 1.2>"
    lowEnergy = "<5 0.3 5 0.4 2>"   

-- EIGENE FUNKTIONEN
    cutting = cut "<1 0 0>"
    anxiety = striate
    lost panning = echoWith 10 0.124 ((# pan panning).(|* gain 0.9))
    afk = (const $ s "")
    stfu = afk
    null = afk
    together p = stutter 3 (2/16) $ p
    asdf sampleName = density 8 
                        $ s sampleName
                        # n (irand 4)
                        # unit "c"
                        # speed 8
    ramp a b = (slow a (range 0 1 b))
    ramp1 a b c d = (slow a(range b c d ))
    noExit = (ramp1 6 0 1 tri)
    subsurface = (ramp1 2 200 1000 tri)
    zweitens = "<0.2 1 42 5>"

-- GANZES
    neverSurface = fast "<1 2 0.5>" 
                    $ every 7 (stfu)
                    $ echoWith 4 "<-0.12 0.22>" ((#pan q1).(|* gain 0.8)) 
                    $ fast "<3 6>" 
                    $ s "sub37" # n "0 1" # pan u2 # gain (ramp1 4 0.8 0.9 tri)
                    # lpf (ramp1 0.5 200 2000 tri)
                    # cut "<1 0 0>"
    noiseGen a =  s "supernoise*32" 
                    # n 1 
                    # gain (ramp1 a 0 1 tri) 
                    -- # bpf 2000 

-- FM SETUP    
-- modulators
let mod11 = pF "mod11"
    mod12 = pF "mod12"
    mod13 = pF "mod13"
    mod14 = pF "mod14"
    mod15 = pF "mod15"
    mod16 = pF "mod16"
    mod21 = pF "mod21"
    mod22 = pF "mod22"
    mod23 = pF "mod23"
    mod24 = pF "mod24"
    mod25 = pF "mod25"
    mod26 = pF "mod26"
    mod31 = pF "mod31"
    mod32 = pF "mod32"
    mod33 = pF "mod33"
    mod34 = pF "mod34"
    mod35 = pF "mod35"
    mod36 = pF "mod36"
    mod41 = pF "mod41"
    mod42 = pF "mod42"
    mod43 = pF "mod43"
    mod44 = pF "mod44"
    mod45 = pF "mod45"
    mod46 = pF "mod46"
    mod51 = pF "mod51"
    mod52 = pF "mod52"
    mod53 = pF "mod53"
    mod54 = pF "mod54"
    mod55 = pF "mod55"
    mod56 = pF "mod56"
    mod61 = pF "mod61"
    mod62 = pF "mod62"
    mod63 = pF "mod63"
    mod64 = pF "mod64"
    mod65 = pF "mod65"
    mod66 = pF "mod66"
    -- operator envelope generator levels
    eglevel11 = pF "eglevel11"
    eglevel12 = pF "eglevel12"
    eglevel13 = pF "eglevel13"
    eglevel14 = pF "eglevel14"
    eglevel21 = pF "eglevel21"
    eglevel22 = pF "eglevel22"
    eglevel23 = pF "eglevel23"
    eglevel24 = pF "eglevel24"
    eglevel31 = pF "eglevel31"
    eglevel32 = pF "eglevel32"
    eglevel33 = pF "eglevel33"
    eglevel34 = pF "eglevel34"
    eglevel41 = pF "eglevel41"
    eglevel42 = pF "eglevel42"
    eglevel43 = pF "eglevel43"
    eglevel44 = pF "eglevel44"
    eglevel51 = pF "eglevel51"
    eglevel52 = pF "eglevel52"
    eglevel53 = pF "eglevel53"
    eglevel54 = pF "eglevel54"
    eglevel61 = pF "eglevel61"
    eglevel62 = pF "eglevel62"
    eglevel63 = pF "eglevel63"
    eglevel64 = pF "eglevel64"
    -- operator envelope generator rates
    egrate11 = pF "egrate11"
    egrate12 = pF "egrate12"
    egrate13 = pF "egrate13"
    egrate14 = pF "egrate14"
    egrate21 = pF "egrate21"
    egrate22 = pF "egrate22"
    egrate23 = pF "egrate23"
    egrate24 = pF "egrate24"
    egrate31 = pF "egrate31"
    egrate32 = pF "egrate32"
    egrate33 = pF "egrate33"
    egrate34 = pF "egrate34"
    egrate41 = pF "egrate41"
    egrate42 = pF "egrate42"
    egrate43 = pF "egrate43"
    egrate44 = pF "egrate44"
    egrate51 = pF "egrate51"
    egrate52 = pF "egrate52"
    egrate53 = pF "egrate53"
    egrate54 = pF "egrate54"
    egrate61 = pF "egrate61"
    egrate62 = pF "egrate62"
    egrate63 = pF "egrate63"
    egrate64 = pF "egrate64"
    -- operator output levels
    amp1 = pF "amp1"
    amp2 = pF "amp2"
    amp3 = pF "amp3"
    amp4 = pF "amp4"
    amp5 = pF "amp5"
    amp6 = pF "amp6"
    -- operator frequency ratios
    ratio1 = pF "ratio1"
    ratio2 = pF "ratio2"
    ratio3 = pF "ratio3"
    ratio4 = pF "ratio4"
    ratio5 = pF "ratio5"
    ratio6 = pF "ratio6"
    -- operator frequency detuners
    detune1 = pF "detune1"
    detune2 = pF "detune2"
    detune3 = pF "detune3"
    detune4 = pF "detune4"
    detune5 = pF "detune5"
    detune6 = pF "detune6"
    -- lfo
    lfofreq = pF "lfofreq"
    lfodepth = pF "lfodepth"
    feedback = pF "feedback"

-- FM PRESETS
    let orgel a = s "superfm"
                    # n a
                    # amp1 1 
                    # amp2 1
                    # amp3 0
                    # amp4 0
                    # amp5 0
                    # amp6 0
                    # mod11 1
                    # mod32 2
                    # ratio1 1
                    # ratio2 1.5
                    # attack 0.3
                    # release 1
        schwebe a = s "superfm"
                    # n a
                    # amp1 1
                    # amp2 1
                    # amp3 0.6
                    # amp4 0
                    # amp5 0
                    # amp6 0
                    # mod11 1
                    # mod32 1
                    # ratio1 1
                    # ratio2 1.01
        hammond a = s "superfm"
                    # n a
                    # amp1 1
                    # amp2 1
                    # amp3 0.5
                    # amp4 0.4
                    # amp5 0.3
                    # amp6 0.2
                    # mod11 1
                    # mod32 1
                    # ratio1 1
                    # ratio2 2
                    # ratio3 3
                    # ratio4 4
                    # ratio5 5
                    # ratio6 6
        doubleSaw a = s "superfm"
                    # n a
                    # amp1 1
                    # amp2 0
                    # amp3 1
                    # amp4 0
                    # mod12 1
                    # mod34 1
                    # ratio1 1
                    # ratio2 2
                    # ratio3 "<1.01 1.03 1.02 1.05>"
                    # ratio4 2
            
        -- DELAYS
        let de a b = echo a b 0.9
        


reverse_list :: [Int] -> [Int]
reverse_list = \list ->
    case list of
        [] -> []
        x:xs -> reverse_list xs ++ [x]